{"version":3,"file":"TransactionTable-B-6AntY5.js","sources":["../../app/javascript/api/resources/transactions.ts","../../app/javascript/hooks/useTransactions.ts","../../app/javascript/components/tables/TransactionTable.tsx"],"sourcesContent":["/**\n * Typed API functions for transactions resource\n */\n\nimport { apiGet, apiPost, apiPatch, apiDelete } from '../client'\nimport { endpoints } from '../endpoints'\nimport type { Transaction } from '../../types/models'\nimport type { ApiResponse } from '../../types/api'\n\nexport interface TransactionListResponse {\n  transactions: Transaction[]\n  stats: {\n    expense_total: number\n    income_total: number\n    expense_count: number\n    income_count: number\n    net_cash_flow: number\n    transaction_count: number\n    top_category: string\n    top_category_amount: number\n    top_expense_merchants: Array<{\n      merchant: string\n      total: number\n      count: number\n      hypothetical: boolean\n    }>\n    top_income_merchants: Array<{\n      merchant: string\n      total: number\n      count: number\n      hypothetical: boolean\n    }>\n  }\n}\n\nexport interface TransactionSearchParams {\n  q?: string\n  year?: number\n  month?: number\n  filter?: 'all' | 'expenses' | 'income' | 'hypothetical'\n  page?: number\n  per_page?: number\n}\n\nexport interface TransactionCreateParams {\n  transaction: {\n    description: string\n    amount: number\n    transaction_date: string\n    category?: string | null\n    merchant?: string | null\n    transaction_type?: 'expense' | 'income'\n  }\n}\n\nexport interface TransactionUpdateParams {\n  transaction: {\n    description?: string\n    amount?: number\n    transaction_date?: string\n    category?: string | null\n    merchant?: string | null\n  }\n}\n\n/**\n * Get list of transactions\n * @param params - Query parameters (filter, year, month, page, per_page)\n */\nexport async function getTransactions(\n  params?: TransactionSearchParams\n): Promise<ApiResponse<TransactionListResponse>> {\n  return apiGet<TransactionListResponse>(endpoints.transactions.index(), params as Record<string, string | number | boolean | null | undefined>)\n}\n\n/**\n * Get transactions for a specific month\n * @param year - Year\n * @param month - Month (1-12)\n * @param params - Additional query parameters\n */\nexport async function getTransactionsByMonth(\n  year: number,\n  month: number,\n  params?: Omit<TransactionSearchParams, 'year' | 'month'>\n): Promise<ApiResponse<TransactionListResponse>> {\n  return apiGet<TransactionListResponse>(\n    endpoints.transactions.month(year, month),\n    params as Record<string, string | number | boolean | null | undefined>\n  )\n}\n\n/**\n * Get a single transaction by ID\n * @param id - Transaction ID\n */\nexport async function getTransaction(id: number): Promise<ApiResponse<Transaction>> {\n  return apiGet<Transaction>(endpoints.transactions.show(id))\n}\n\n/**\n * Search transactions\n * @param params - Search parameters (q, year, month)\n */\nexport async function searchTransactions(\n  params: Pick<TransactionSearchParams, 'q' | 'year' | 'month'>\n): Promise<ApiResponse<TransactionListResponse>> {\n  return apiGet<TransactionListResponse>(endpoints.transactions.search(), params as Record<string, string | number | boolean | null | undefined>)\n}\n\n/**\n * Create a new transaction\n * @param params - Transaction data\n */\nexport async function createTransaction(\n  params: TransactionCreateParams\n): Promise<ApiResponse<Transaction>> {\n  return apiPost<Transaction>(endpoints.transactions.create(), params)\n}\n\n/**\n * Update an existing transaction\n * @param id - Transaction ID\n * @param params - Updated transaction data\n */\nexport async function updateTransaction(\n  id: number,\n  params: TransactionUpdateParams\n): Promise<ApiResponse<Transaction>> {\n  return apiPatch<Transaction>(endpoints.transactions.update(id), params)\n}\n\n/**\n * Delete a transaction\n * @param id - Transaction ID\n */\nexport async function deleteTransaction(\n  id: number\n): Promise<ApiResponse<{ message: string }>> {\n  return apiDelete<{ message: string }>(endpoints.transactions.destroy(id))\n}\n\n","/**\n * React Query hook for transactions data\n */\n\nimport { useApiQuery } from './useApi'\nimport { getTransactions, getTransactionsByMonth, type TransactionSearchParams } from '../api/resources/transactions'\nimport type { TransactionListResponse } from '../api/resources/transactions'\n\nexport interface UseTransactionsParams {\n  year?: number\n  month?: number\n  filterType?: 'all' | 'expenses' | 'income' | 'hypothetical'\n  page?: number\n  perPage?: number\n}\n\n/**\n * Fetch transactions with React Query\n */\nexport function useTransactions(params?: UseTransactionsParams) {\n  const queryParams: TransactionSearchParams = {\n    filter: params?.filterType,\n    page: params?.page,\n    per_page: params?.perPage\n  }\n\n  const queryFn = params?.year && params?.month\n    ? () => getTransactionsByMonth(params.year!, params.month!, queryParams)\n    : () => getTransactions(queryParams)\n\n  return useApiQuery<TransactionListResponse>(\n    ['transactions', params?.year, params?.month, params?.filterType, params?.page],\n    queryFn,\n    {\n      staleTime: 1000 * 60 * 2 // 2 minutes\n    }\n  )\n}\n\n","/**\n * Transaction Table Component\n * Displays transactions in a sortable table (desktop) or card layout (mobile)\n */\n\nimport React, { useState, useMemo } from 'react'\nimport { QueryProvider } from '../../providers/QueryProvider'\nimport { ErrorBoundary } from '../shared/ErrorBoundary'\nimport { useTransactions } from '../../hooks/useTransactions'\nimport { useResponsive } from '../../hooks/useResponsive'\nimport type { Transaction } from '../../types/models'\n\ninterface TransactionTableProps {\n  year?: number\n  month?: number\n  filterType?: 'all' | 'expenses' | 'income' | 'hypothetical'\n  initialTransactions?: Transaction[]\n}\n\ntype SortColumn = 'date' | 'description' | 'category' | 'amount'\ntype SortDirection = 'asc' | 'desc'\n\nfunction TransactionTableContent({\n  year,\n  month,\n  filterType = 'all',\n  initialTransactions\n}: TransactionTableProps): React.JSX.Element {\n  const { data, isLoading, error } = useTransactions({ year, month, filterType })\n  const [sortColumn, setSortColumn] = useState<SortColumn>('date')\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc')\n  const { isMobile } = useResponsive()\n\n  const transactions = data?.data?.transactions || initialTransactions || []\n  const meta = data?.meta\n\n  // Sort transactions client-side\n  const sortedTransactions = useMemo(() => {\n    const sorted = [...transactions].sort((a, b) => {\n      let aVal: string | number\n      let bVal: string | number\n\n      switch (sortColumn) {\n        case 'date':\n          aVal = new Date(a.transaction_date).getTime()\n          bVal = new Date(b.transaction_date).getTime()\n          break\n        case 'description':\n          aVal = a.description.toLowerCase()\n          bVal = b.description.toLowerCase()\n          break\n        case 'category':\n          aVal = (a.category || 'Uncategorized').toLowerCase()\n          bVal = (b.category || 'Uncategorized').toLowerCase()\n          break\n        case 'amount':\n          aVal = a.amount\n          bVal = b.amount\n          break\n        default:\n          return 0\n      }\n\n      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1\n      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1\n      return 0\n    })\n    return sorted\n  }, [transactions, sortColumn, sortDirection])\n\n  const handleSort = (column: SortColumn) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')\n    } else {\n      setSortColumn(column)\n      setSortDirection('desc')\n    }\n  }\n\n  const formatAmount = (amount: number): string => {\n    const sign = amount < 0 ? '-' : '+'\n    return `${sign}$${Math.abs(amount).toFixed(2)}`\n  }\n\n  const getStatusBadge = (transaction: Transaction): React.JSX.Element => {\n    if (transaction.is_hypothetical) {\n      return (\n        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-info-100 dark:bg-info-900/30 text-info-800 dark:text-info-300\">\n          Hypothetical\n        </span>\n      )\n    } else if (transaction.status === 'HELD') {\n      return (\n        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-warning-100 dark:bg-warning-900/30 text-warning-800 dark:text-warning-300\">\n          Pending\n        </span>\n      )\n    } else {\n      return (\n        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-success-100 dark:bg-success-900/30 text-success-800 dark:text-success-300\">\n          Settled\n        </span>\n      )\n    }\n  }\n\n  const SortIcon = ({ column }: { column: SortColumn }): React.JSX.Element | null => {\n    if (sortColumn !== column) return null\n    return (\n      <svg\n        className={`w-4 h-4 ml-1 ${sortDirection === 'asc' ? '' : 'transform rotate-180'}`}\n        fill=\"none\"\n        stroke=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 15l7-7 7 7\" />\n      </svg>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"px-6 py-12 text-center\">\n        <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n        <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">Loading transactions...</p>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"px-6 py-12 text-center\">\n        <p className=\"text-sm text-red-600 dark:text-red-400\">Error loading transactions</p>\n      </div>\n    )\n  }\n\n  if (sortedTransactions.length === 0) {\n    return (\n      <div className=\"px-6 py-12 text-center\">\n        <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\n        </svg>\n        <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">No transactions</h3>\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">No transactions found for the selected filter.</p>\n      </div>\n    )\n  }\n\n  // Mobile card layout\n  if (isMobile) {\n    return (\n      <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n        {sortedTransactions.map((transaction) => (\n          <div\n            key={transaction.id}\n            className={`p-4 ${\n              transaction.is_hypothetical ? 'bg-purple-50 dark:bg-purple-900/20' : ''\n            } hover:bg-gray-50 dark:hover:bg-gray-700`}\n          >\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  {transaction.description}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                  {new Date(transaction.transaction_date).toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric'\n                  })}\n                </p>\n              </div>\n              <span\n                className={`text-sm font-medium ${\n                  transaction.amount < 0\n                    ? 'text-expense-600 dark:text-expense-400'\n                    : 'text-income-600 dark:text-income-400'\n                }`}\n              >\n                {formatAmount(transaction.amount)}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              {transaction.category && (\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {(transaction.category || 'Uncategorized').replace(/_/g, ' ')}\n                </span>\n              )}\n              {getStatusBadge(transaction)}\n            </div>\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  // Desktop table layout\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n        <thead className=\"bg-gray-50 dark:bg-gray-900\">\n          <tr>\n            <th\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n              onClick={() => handleSort('date')}\n            >\n              <div className=\"flex items-center\">\n                Date\n                <SortIcon column=\"date\" />\n              </div>\n            </th>\n            <th\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n              onClick={() => handleSort('description')}\n            >\n              <div className=\"flex items-center\">\n                Description\n                <SortIcon column=\"description\" />\n              </div>\n            </th>\n            <th\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n              onClick={() => handleSort('category')}\n            >\n              <div className=\"flex items-center\">\n                Category\n                <SortIcon column=\"category\" />\n              </div>\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Status\n            </th>\n            <th\n              className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n              onClick={() => handleSort('amount')}\n            >\n              <div className=\"flex items-center justify-end\">\n                Amount\n                <SortIcon column=\"amount\" />\n              </div>\n            </th>\n            <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Actions\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n          {sortedTransactions.map((transaction) => (\n            <tr\n              key={transaction.id}\n              className={`hover:bg-gray-50 dark:hover:bg-gray-700 ${\n                transaction.is_hypothetical ? 'bg-purple-50 dark:bg-purple-900/20' : ''\n              }`}\n            >\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                {new Date(transaction.transaction_date).toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric'\n                })}\n              </td>\n              <td className=\"px-6 py-4 text-sm text-gray-900 dark:text-gray-300\">\n                {transaction.description}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                {(transaction.category || 'Uncategorized').replace(/_/g, ' ')}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">{getStatusBadge(transaction)}</td>\n              <td\n                className={`px-6 py-4 whitespace-nowrap text-sm text-right font-medium ${\n                  transaction.amount < 0\n                    ? 'text-expense-600 dark:text-expense-400'\n                    : 'text-income-600 dark:text-income-400'\n                }`}\n              >\n                {formatAmount(transaction.amount)}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-right\">\n                {/* Action buttons will be added via server-side rendering or another component */}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {meta?.pagination && (\n        <div className=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700\">\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n            Page {meta.pagination.page} of {meta.pagination.total_pages} ({meta.pagination.total} total)\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default function TransactionTable(props: TransactionTableProps): React.JSX.Element {\n  return (\n    <ErrorBoundary>\n      <QueryProvider>\n        <TransactionTableContent {...props} />\n      </QueryProvider>\n    </ErrorBoundary>\n  )\n}\n\n"],"names":["getTransactions","params","apiGet","endpoints","getTransactionsByMonth","year","month","useTransactions","queryParams","queryFn","useApiQuery","TransactionTableContent","filterType","initialTransactions","data","isLoading","error","sortColumn","setSortColumn","useState","sortDirection","setSortDirection","isMobile","useResponsive","transactions","_a","meta","sortedTransactions","useMemo","a","b","aVal","bVal","handleSort","column","formatAmount","amount","getStatusBadge","transaction","jsx","SortIcon","jsxs","TransactionTable","props","ErrorBoundary","QueryProvider"],"mappings":"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"}