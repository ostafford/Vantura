{"version":3,"file":"RecurringTransactionForm-D4fdEXW_.js","sources":["../../app/javascript/hooks/useRecurringMutations.ts","../../app/javascript/components/forms/RecurringTransactionForm.tsx"],"sourcesContent":["/**\n * React Query hooks for recurring transaction mutations\n */\n\nimport { useApiMutation } from './useApi'\nimport { createRecurringTransaction, updateRecurringTransaction } from '../api/resources/recurring'\nimport type { RecurringTransaction } from '../types/models'\nimport type { RecurringTransactionCreateParams, RecurringTransactionUpdateParams } from '../api/resources/recurring'\n\n/**\n * Create a new recurring transaction\n */\nexport function useCreateRecurringTransaction() {\n  return useApiMutation<RecurringTransaction, RecurringTransactionCreateParams>(\n    (params) => createRecurringTransaction(params),\n    {\n      onSuccess: () => {\n        // Invalidates recurring transactions list\n      }\n    }\n  )\n}\n\n/**\n * Update an existing recurring transaction\n */\nexport function useUpdateRecurringTransaction() {\n  return useApiMutation<RecurringTransaction, { id: number; params: RecurringTransactionUpdateParams }>(\n    ({ id, params }) => updateRecurringTransaction(id, params),\n    {\n      onSuccess: () => {\n        // Invalidates recurring transactions list\n      }\n    }\n  )\n}\n\n","/**\n * Recurring Transaction Form Component\n * Create recurring transactions from existing transactions or from scratch\n */\n\nimport React, { useState, useEffect } from 'react'\nimport { QueryProvider } from '../../providers/QueryProvider'\nimport { ErrorBoundary } from '../shared/ErrorBoundary'\nimport { useCreateRecurringTransaction } from '../../hooks/useRecurringMutations'\nimport type { RecurringFrequency, TransactionType } from '../../types/models'\n\ninterface RecurringTransactionFormProps {\n  transactionId?: number\n  description?: string\n  amount?: number\n  transactionDate?: string\n  onSuccess?: () => void\n  onCancel?: () => void\n}\n\nfunction RecurringTransactionFormContent({\n  transactionId,\n  description: initialDescription,\n  amount: initialAmount,\n  transactionDate: initialTransactionDate,\n  onSuccess,\n  onCancel\n}: RecurringTransactionFormProps): React.JSX.Element {\n  const createRecurring = useCreateRecurringTransaction()\n\n  const [description, setDescription] = useState(initialDescription || '')\n  const [amount, setAmount] = useState(initialAmount || 0)\n  const [frequency, setFrequency] = useState<RecurringFrequency>('monthly')\n  const [nextOccurrenceDate, setNextOccurrenceDate] = useState<string>('')\n  const [transactionType, setTransactionType] = useState<TransactionType>(initialAmount && initialAmount < 0 ? 'expense' : 'income')\n  const [projectionMonths, setProjectionMonths] = useState<string>('indefinite')\n  const [amountTolerance, setAmountTolerance] = useState<number>(1.0)\n  const [errors, setErrors] = useState<Record<string, string>>({})\n\n  // Calculate default next occurrence date based on frequency and transaction date\n  useEffect(() => {\n    if (!nextOccurrenceDate && initialTransactionDate) {\n      const date = new Date(initialTransactionDate)\n      const newDate = new Date(date)\n      \n      switch (frequency) {\n        case 'weekly':\n          newDate.setDate(date.getDate() + 7)\n          break\n        case 'fortnightly':\n          newDate.setDate(date.getDate() + 14)\n          break\n        case 'monthly':\n          newDate.setMonth(date.getMonth() + 1)\n          break\n        case 'quarterly':\n          newDate.setMonth(date.getMonth() + 3)\n          break\n        case 'yearly':\n          newDate.setFullYear(date.getFullYear() + 1)\n          break\n      }\n      \n      setNextOccurrenceDate(newDate.toISOString().split('T')[0])\n    }\n  }, [frequency, initialTransactionDate, nextOccurrenceDate])\n\n  // Update next occurrence when frequency changes\n  useEffect(() => {\n    if (initialTransactionDate) {\n      const date = new Date(initialTransactionDate)\n      const newDate = new Date(date)\n      \n      switch (frequency) {\n        case 'weekly':\n          newDate.setDate(date.getDate() + 7)\n          break\n        case 'fortnightly':\n          newDate.setDate(date.getDate() + 14)\n          break\n        case 'monthly':\n          newDate.setMonth(date.getMonth() + 1)\n          break\n        case 'quarterly':\n          newDate.setMonth(date.getMonth() + 3)\n          break\n        case 'yearly':\n          newDate.setFullYear(date.getFullYear() + 1)\n          break\n      }\n      \n      setNextOccurrenceDate(newDate.toISOString().split('T')[0])\n    }\n  }, [frequency])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setErrors({})\n\n    // Validation\n    if (!description.trim()) {\n      setErrors({ description: 'Description is required' })\n      return\n    }\n    if (!nextOccurrenceDate) {\n      setErrors({ next_occurrence_date: 'Next occurrence date is required' })\n      return\n    }\n\n    try {\n      await createRecurring.mutateAsync({\n        transaction_id: transactionId,\n        recurring_transaction: {\n          description,\n          amount,\n          frequency,\n          next_occurrence_date: nextOccurrenceDate,\n          transaction_type: transactionType,\n          projection_months: projectionMonths,\n          amount_tolerance: amountTolerance,\n          is_active: true\n        }\n      })\n\n      if (onSuccess) {\n        onSuccess()\n      } else {\n        // Close modal and reload\n        window.location.reload()\n      }\n    } catch (error) {\n      console.error('Failed to create recurring transaction:', error)\n      setErrors({ submit: 'Failed to create recurring pattern. Please try again.' })\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"p-6\">\n      <div className=\"space-y-5\">\n        {/* Transaction Preview */}\n        {(initialDescription || description) && (\n          <div className=\"bg-success-500/5 dark:bg-success-700/10 border-2 border-success-500/20 dark:border-success-700 rounded-lg p-4\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <div className=\"inline-flex items-center justify-center w-9 h-9 bg-success-500/10 dark:bg-success-700/20 rounded-lg\">\n                <svg className=\"w-5 h-5 text-success-500 dark:text-success-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n                </svg>\n              </div>\n              <p className=\"text-sm font-semibold text-gray-700 dark:text-gray-300\">Transaction Details</p>\n            </div>\n            <p className=\"text-lg font-bold text-gray-900 dark:text-white mb-1\">{description || initialDescription}</p>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Amount: <span className=\"font-semibold text-gray-900 dark:text-white\">${Math.abs(amount).toFixed(2)}</span>\n            </p>\n          </div>\n        )}\n\n        {/* Description */}\n        <div>\n          <label htmlFor=\"recurring-description\" className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">\n            Description\n          </label>\n          <input\n            type=\"text\"\n            id=\"recurring-description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            required\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-primary-900 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-all\"\n          />\n          {errors.description && <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">{errors.description}</p>}\n        </div>\n\n        {/* Transaction Type */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">Transaction Type</label>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <label className=\"flex items-center p-3 border-2 border-gray-200 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-primary-900 transition-all\">\n              <input\n                type=\"radio\"\n                name=\"transaction_type\"\n                value=\"expense\"\n                checked={transactionType === 'expense'}\n                onChange={() => setTransactionType('expense')}\n                className=\"mr-2\"\n              />\n              <span className=\"text-sm text-gray-700 dark:text-gray-300\">Expense</span>\n            </label>\n            <label className=\"flex items-center p-3 border-2 border-gray-200 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-primary-900 transition-all\">\n              <input\n                type=\"radio\"\n                name=\"transaction_type\"\n                value=\"income\"\n                checked={transactionType === 'income'}\n                onChange={() => setTransactionType('income')}\n                className=\"mr-2\"\n              />\n              <span className=\"text-sm text-gray-700 dark:text-gray-300\">Income</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Amount */}\n        <div>\n          <label htmlFor=\"recurring-amount\" className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">\n            Amount\n          </label>\n          <input\n            type=\"number\"\n            id=\"recurring-amount\"\n            value={amount}\n            onChange={(e) => setAmount(parseFloat(e.target.value) || 0)}\n            step=\"0.01\"\n            required\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-primary-900 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-all\"\n          />\n        </div>\n\n        {/* Frequency */}\n        <div>\n          <label htmlFor=\"frequency\" className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">\n            How often does this occur?\n          </label>\n          <select\n            id=\"frequency\"\n            value={frequency}\n            onChange={(e) => setFrequency(e.target.value as RecurringFrequency)}\n            required\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-primary-900 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-all\"\n          >\n            <option value=\"weekly\">Weekly (every 7 days)</option>\n            <option value=\"fortnightly\">Fortnightly (every 14 days)</option>\n            <option value=\"monthly\">Monthly</option>\n            <option value=\"quarterly\">Quarterly (every 3 months)</option>\n            <option value=\"yearly\">Yearly</option>\n          </select>\n        </div>\n\n        {/* Next Occurrence Date */}\n        <div>\n          <label htmlFor=\"nextOccurrenceDate\" className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">\n            When is the next occurrence?\n          </label>\n          <input\n            type=\"date\"\n            id=\"nextOccurrenceDate\"\n            value={nextOccurrenceDate}\n            onChange={(e) => setNextOccurrenceDate(e.target.value)}\n            required\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-primary-900 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-all\"\n          />\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1.5\">We'll project future occurrences from this date</p>\n          {errors.next_occurrence_date && (\n            <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">{errors.next_occurrence_date}</p>\n          )}\n        </div>\n\n        {/* Projection Duration */}\n        <div>\n          <label htmlFor=\"projection_months\" className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">\n            How far ahead to project?\n          </label>\n          <select\n            id=\"projection_months\"\n            value={projectionMonths}\n            onChange={(e) => setProjectionMonths(e.target.value)}\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-primary-900 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-all\"\n          >\n            <option value=\"indefinite\">Indefinite (recommended)</option>\n            <option value=\"3\">3 months</option>\n            <option value=\"6\">6 months</option>\n            <option value=\"12\">12 months</option>\n            <option value=\"24\">24 months</option>\n          </select>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1.5\">\n            Indefinite will continue projecting as you navigate future months\n          </p>\n        </div>\n\n        {/* Amount Tolerance */}\n        <div>\n          <label htmlFor=\"recurring_transaction_amount_tolerance\" className=\"block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\">\n            Amount matching tolerance\n          </label>\n          <div className=\"relative\">\n            <span className=\"absolute left-4 top-3 text-gray-500 dark:text-gray-400 font-semibold\">±$</span>\n            <input\n              type=\"number\"\n              id=\"recurring_transaction_amount_tolerance\"\n              value={amountTolerance}\n              onChange={(e) => setAmountTolerance(parseFloat(e.target.value) || 0)}\n              step=\"0.01\"\n              min=\"0\"\n              className=\"w-full pl-10 pr-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-primary-900 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-all\"\n            />\n          </div>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1.5\">Allows matching transactions with slightly different amounts</p>\n        </div>\n\n        {/* Info Box */}\n        <div className=\"bg-success-500/10 dark:bg-success-700/10 border border-success-500/30 dark:border-success-700 rounded-lg p-4\">\n          <div className=\"flex items-start gap-3\">\n            <svg className=\"w-5 h-5 text-success-500 dark:text-success-300 flex-shrink-0 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <div>\n              <p className=\"text-sm font-semibold text-gray-800 dark:text-gray-200 mb-1\">How it works</p>\n              <p className=\"text-xs text-gray-700 dark:text-gray-300 leading-relaxed\">\n                We'll automatically add this transaction to future months. When Up Bank syncs the real transaction, we'll match and replace it.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {errors.submit && (\n          <div className=\"p-3 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg\">\n            <p className=\"text-sm text-red-800 dark:text-red-300\">{errors.submit}</p>\n          </div>\n        )}\n\n        {/* Submit Buttons */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex gap-3\">\n            <button\n              type=\"submit\"\n              disabled={createRecurring.isPending}\n              className=\"flex-1 bg-gradient-to-r from-success-500 to-success-700 hover:from-success-700 hover:to-success-500 text-white px-5 py-3 rounded-lg font-semibold shadow-md hover:shadow-lg transition-all disabled:opacity-50\"\n            >\n              Create Pattern\n            </button>\n            {onCancel && (\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-5 py-3 bg-white dark:bg-primary-950 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-primary-900 font-semibold transition-all\"\n              >\n                Cancel\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </form>\n  )\n}\n\nexport default function RecurringTransactionForm(props: RecurringTransactionFormProps): React.JSX.Element {\n  return (\n    <ErrorBoundary>\n      <QueryProvider>\n        <RecurringTransactionFormContent {...props} />\n      </QueryProvider>\n    </ErrorBoundary>\n  )\n}\n\n"],"names":["useCreateRecurringTransaction","useApiMutation","params","createRecurringTransaction","RecurringTransactionFormContent","transactionId","initialDescription","initialAmount","initialTransactionDate","onSuccess","onCancel","createRecurring","description","setDescription","useState","amount","setAmount","frequency","setFrequency","nextOccurrenceDate","setNextOccurrenceDate","transactionType","setTransactionType","projectionMonths","setProjectionMonths","amountTolerance","setAmountTolerance","errors","setErrors","useEffect","date","newDate","handleSubmit","e","error","jsx","jsxs","RecurringTransactionForm","props","ErrorBoundary","QueryProvider"],"mappings":"2JAYO,SAASA,GAAgC,CAC9C,OAAOC,EACJC,GAAWC,EAA2BD,CAAM,EAC7C,CACE,UAAW,IAAM,CAEjB,CAAA,CACF,CAEJ,CCDA,SAASE,EAAgC,CACvC,cAAAC,EACA,YAAaC,EACb,OAAQC,EACR,gBAAiBC,EACjB,UAAAC,EACA,SAAAC,CACF,EAAqD,CACnD,MAAMC,EAAkBX,EAAA,EAElB,CAACY,EAAaC,CAAc,EAAIC,EAAAA,SAASR,GAAsB,EAAE,EACjE,CAACS,EAAQC,CAAS,EAAIF,EAAAA,SAASP,GAAiB,CAAC,EACjD,CAACU,EAAWC,CAAY,EAAIJ,EAAAA,SAA6B,SAAS,EAClE,CAACK,EAAoBC,CAAqB,EAAIN,EAAAA,SAAiB,EAAE,EACjE,CAACO,EAAiBC,CAAkB,EAAIR,EAAAA,SAA0BP,GAAiBA,EAAgB,EAAI,UAAY,QAAQ,EAC3H,CAACgB,EAAkBC,CAAmB,EAAIV,EAAAA,SAAiB,YAAY,EACvE,CAACW,EAAiBC,CAAkB,EAAIZ,EAAAA,SAAiB,CAAG,EAC5D,CAACa,EAAQC,CAAS,EAAId,EAAAA,SAAiC,CAAA,CAAE,EAG/De,EAAAA,UAAU,IAAM,CACd,GAAI,CAACV,GAAsBX,EAAwB,CACjD,MAAMsB,EAAO,IAAI,KAAKtB,CAAsB,EACtCuB,EAAU,IAAI,KAAKD,CAAI,EAE7B,OAAQb,EAAA,CACN,IAAK,SACHc,EAAQ,QAAQD,EAAK,QAAA,EAAY,CAAC,EAClC,MACF,IAAK,cACHC,EAAQ,QAAQD,EAAK,QAAA,EAAY,EAAE,EACnC,MACF,IAAK,UACHC,EAAQ,SAASD,EAAK,SAAA,EAAa,CAAC,EACpC,MACF,IAAK,YACHC,EAAQ,SAASD,EAAK,SAAA,EAAa,CAAC,EACpC,MACF,IAAK,SACHC,EAAQ,YAAYD,EAAK,YAAA,EAAgB,CAAC,EAC1C,KAAA,CAGJV,EAAsBW,EAAQ,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,CAAC,CAC3D,CACF,EAAG,CAACd,EAAWT,EAAwBW,CAAkB,CAAC,EAG1DU,EAAAA,UAAU,IAAM,CACd,GAAIrB,EAAwB,CAC1B,MAAMsB,EAAO,IAAI,KAAKtB,CAAsB,EACtCuB,EAAU,IAAI,KAAKD,CAAI,EAE7B,OAAQb,EAAA,CACN,IAAK,SACHc,EAAQ,QAAQD,EAAK,QAAA,EAAY,CAAC,EAClC,MACF,IAAK,cACHC,EAAQ,QAAQD,EAAK,QAAA,EAAY,EAAE,EACnC,MACF,IAAK,UACHC,EAAQ,SAASD,EAAK,SAAA,EAAa,CAAC,EACpC,MACF,IAAK,YACHC,EAAQ,SAASD,EAAK,SAAA,EAAa,CAAC,EACpC,MACF,IAAK,SACHC,EAAQ,YAAYD,EAAK,YAAA,EAAgB,CAAC,EAC1C,KAAA,CAGJV,EAAsBW,EAAQ,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,CAAC,CAC3D,CACF,EAAG,CAACd,CAAS,CAAC,EAEd,MAAMe,EAAe,MAAOC,GAAuB,CAKjD,GAJAA,EAAE,eAAA,EACFL,EAAU,CAAA,CAAE,EAGR,CAAChB,EAAY,OAAQ,CACvBgB,EAAU,CAAE,YAAa,0BAA2B,EACpD,MACF,CACA,GAAI,CAACT,EAAoB,CACvBS,EAAU,CAAE,qBAAsB,mCAAoC,EACtE,MACF,CAEA,GAAI,CACF,MAAMjB,EAAgB,YAAY,CAChC,eAAgBN,EAChB,sBAAuB,CACrB,YAAAO,EACA,OAAAG,EACA,UAAAE,EACA,qBAAsBE,EACtB,iBAAkBE,EAClB,kBAAmBE,EACnB,iBAAkBE,EAClB,UAAW,EAAA,CACb,CACD,EAEGhB,EACFA,EAAA,EAGA,OAAO,SAAS,OAAA,CAEpB,OAASyB,EAAO,CACd,QAAQ,MAAM,0CAA2CA,CAAK,EAC9DN,EAAU,CAAE,OAAQ,wDAAyD,CAC/E,CACF,EAEA,OACEO,EAAAA,IAAC,QAAK,SAAUH,EAAc,UAAU,MACtC,SAAAI,EAAAA,KAAC,MAAA,CAAI,UAAU,YAEX,SAAA,EAAA9B,GAAsBM,IACtBwB,EAAAA,KAAC,MAAA,CAAI,UAAU,gHACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAD,EAAAA,IAAC,MAAA,CAAI,UAAU,sGACb,SAAAA,EAAAA,IAAC,MAAA,CAAI,UAAU,iDAAiD,KAAK,OAAO,OAAO,eAAe,QAAQ,YACxG,SAAAA,EAAAA,IAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,iIAAA,CAAkI,CAAA,CACzM,CAAA,CACF,EACAA,EAAAA,IAAC,IAAA,CAAE,UAAU,yDAAyD,SAAA,qBAAA,CAAmB,CAAA,EAC3F,EACAA,EAAAA,IAAC,IAAA,CAAE,UAAU,uDAAwD,YAAe7B,EAAmB,EACvG8B,EAAAA,KAAC,IAAA,CAAE,UAAU,2CAA2C,SAAA,CAAA,WAC9CA,EAAAA,KAAC,OAAA,CAAK,UAAU,8CAA8C,SAAA,CAAA,IAAE,KAAK,IAAIrB,CAAM,EAAE,QAAQ,CAAC,CAAA,CAAA,CAAE,CAAA,CAAA,CACtG,CAAA,EACF,SAID,MAAA,CACC,SAAA,CAAAoB,MAAC,QAAA,CAAM,QAAQ,wBAAwB,UAAU,oEAAoE,SAAA,cAErH,EACAA,EAAAA,IAAC,QAAA,CACC,KAAK,OACL,GAAG,wBACH,MAAOvB,EACP,SAAWqB,GAAMpB,EAAeoB,EAAE,OAAO,KAAK,EAC9C,SAAQ,GACR,UAAU,oNAAA,CAAA,EAEXN,EAAO,aAAeQ,EAAAA,IAAC,KAAE,UAAU,8CAA+C,WAAO,WAAA,CAAY,CAAA,EACxG,SAGC,MAAA,CACC,SAAA,CAAAA,EAAAA,IAAC,QAAA,CAAM,UAAU,oEAAoE,SAAA,mBAAgB,EACrGC,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,EAAAA,KAAC,QAAA,CAAM,UAAU,0JACf,SAAA,CAAAD,EAAAA,IAAC,QAAA,CACC,KAAK,QACL,KAAK,mBACL,MAAM,UACN,QAASd,IAAoB,UAC7B,SAAU,IAAMC,EAAmB,SAAS,EAC5C,UAAU,MAAA,CAAA,EAEZa,EAAAA,IAAC,OAAA,CAAK,UAAU,2CAA2C,SAAA,SAAA,CAAO,CAAA,EACpE,EACAC,EAAAA,KAAC,QAAA,CAAM,UAAU,0JACf,SAAA,CAAAD,EAAAA,IAAC,QAAA,CACC,KAAK,QACL,KAAK,mBACL,MAAM,SACN,QAASd,IAAoB,SAC7B,SAAU,IAAMC,EAAmB,QAAQ,EAC3C,UAAU,MAAA,CAAA,EAEZa,EAAAA,IAAC,OAAA,CAAK,UAAU,2CAA2C,SAAA,QAAA,CAAM,CAAA,CAAA,CACnE,CAAA,CAAA,CACF,CAAA,EACF,SAGC,MAAA,CACC,SAAA,CAAAA,MAAC,QAAA,CAAM,QAAQ,mBAAmB,UAAU,oEAAoE,SAAA,SAEhH,EACAA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,GAAG,mBACH,MAAOpB,EACP,SAAWkB,GAAMjB,EAAU,WAAWiB,EAAE,OAAO,KAAK,GAAK,CAAC,EAC1D,KAAK,OACL,SAAQ,GACR,UAAU,oNAAA,CAAA,CACZ,EACF,SAGC,MAAA,CACC,SAAA,CAAAE,MAAC,QAAA,CAAM,QAAQ,YAAY,UAAU,oEAAoE,SAAA,6BAEzG,EACAC,EAAAA,KAAC,SAAA,CACC,GAAG,YACH,MAAOnB,EACP,SAAWgB,GAAMf,EAAae,EAAE,OAAO,KAA2B,EAClE,SAAQ,GACR,UAAU,qNAEV,SAAA,CAAAE,EAAAA,IAAC,SAAA,CAAO,MAAM,SAAS,SAAA,wBAAqB,EAC5CA,EAAAA,IAAC,SAAA,CAAO,MAAM,cAAc,SAAA,8BAA2B,EACvDA,EAAAA,IAAC,SAAA,CAAO,MAAM,UAAU,SAAA,UAAO,EAC/BA,EAAAA,IAAC,SAAA,CAAO,MAAM,YAAY,SAAA,6BAA0B,EACpDA,EAAAA,IAAC,SAAA,CAAO,MAAM,SAAS,SAAA,QAAA,CAAM,CAAA,CAAA,CAAA,CAC/B,EACF,SAGC,MAAA,CACC,SAAA,CAAAA,MAAC,QAAA,CAAM,QAAQ,qBAAqB,UAAU,oEAAoE,SAAA,+BAElH,EACAA,EAAAA,IAAC,QAAA,CACC,KAAK,OACL,GAAG,qBACH,MAAOhB,EACP,SAAWc,GAAMb,EAAsBa,EAAE,OAAO,KAAK,EACrD,SAAQ,GACR,UAAU,oNAAA,CAAA,EAEZE,EAAAA,IAAC,IAAA,CAAE,UAAU,kDAAkD,SAAA,kDAA+C,EAC7GR,EAAO,sBACNQ,EAAAA,IAAC,KAAE,UAAU,8CAA+C,WAAO,oBAAA,CAAqB,CAAA,EAE5F,SAGC,MAAA,CACC,SAAA,CAAAA,MAAC,QAAA,CAAM,QAAQ,oBAAoB,UAAU,oEAAoE,SAAA,4BAEjH,EACAC,EAAAA,KAAC,SAAA,CACC,GAAG,oBACH,MAAOb,EACP,SAAWU,GAAMT,EAAoBS,EAAE,OAAO,KAAK,EACnD,UAAU,qNAEV,SAAA,CAAAE,EAAAA,IAAC,SAAA,CAAO,MAAM,aAAa,SAAA,2BAAwB,EACnDA,EAAAA,IAAC,SAAA,CAAO,MAAM,IAAI,SAAA,WAAQ,EAC1BA,EAAAA,IAAC,SAAA,CAAO,MAAM,IAAI,SAAA,WAAQ,EAC1BA,EAAAA,IAAC,SAAA,CAAO,MAAM,KAAK,SAAA,YAAS,EAC5BA,EAAAA,IAAC,SAAA,CAAO,MAAM,KAAK,SAAA,WAAA,CAAS,CAAA,CAAA,CAAA,EAE9BA,EAAAA,IAAC,IAAA,CAAE,UAAU,kDAAkD,SAAA,mEAAA,CAE/D,CAAA,EACF,SAGC,MAAA,CACC,SAAA,CAAAA,MAAC,QAAA,CAAM,QAAQ,yCAAyC,UAAU,oEAAoE,SAAA,4BAEtI,EACAC,EAAAA,KAAC,MAAA,CAAI,UAAU,WACb,SAAA,CAAAD,EAAAA,IAAC,OAAA,CAAK,UAAU,uEAAuE,SAAA,KAAE,EACzFA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,GAAG,yCACH,MAAOV,EACP,SAAWQ,GAAMP,EAAmB,WAAWO,EAAE,OAAO,KAAK,GAAK,CAAC,EACnE,KAAK,OACL,IAAI,IACJ,UAAU,0NAAA,CAAA,CACZ,EACF,EACAE,EAAAA,IAAC,IAAA,CAAE,UAAU,kDAAkD,SAAA,8DAAA,CAA4D,CAAA,EAC7H,QAGC,MAAA,CAAI,UAAU,+GACb,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAD,EAAAA,IAAC,OAAI,UAAU,sEAAsE,KAAK,OAAO,OAAO,eAAe,QAAQ,YAC7H,eAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,4DAA4D,CAAA,CACnI,SACC,MAAA,CACC,SAAA,CAAAA,EAAAA,IAAC,IAAA,CAAE,UAAU,8DAA8D,SAAA,eAAY,EACvFA,EAAAA,IAAC,IAAA,CAAE,UAAU,2DAA2D,SAAA,iIAAA,CAExE,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,EAECR,EAAO,QACNQ,MAAC,MAAA,CAAI,UAAU,yFACb,SAAAA,EAAAA,IAAC,IAAA,CAAE,UAAU,yCAA0C,SAAAR,EAAO,MAAA,CAAO,EACvE,QAID,MAAA,CAAI,UAAU,0DACb,SAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAD,EAAAA,IAAC,SAAA,CACC,KAAK,SACL,SAAUxB,EAAgB,UAC1B,UAAU,iNACX,SAAA,gBAAA,CAAA,EAGAD,GACCyB,EAAAA,IAAC,SAAA,CACC,KAAK,SACL,QAASzB,EACT,UAAU,2MACX,SAAA,QAAA,CAAA,CAED,CAAA,CAEJ,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ,CAEA,SAAwB2B,EAAyBC,EAAyD,CACxG,OACEH,EAAAA,IAACI,GACC,SAAAJ,EAAAA,IAACK,EAAA,CACC,eAACpC,EAAA,CAAiC,GAAGkC,CAAA,CAAO,CAAA,CAC9C,CAAA,CACF,CAEJ"}