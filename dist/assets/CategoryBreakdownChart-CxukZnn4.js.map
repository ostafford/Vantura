{"version":3,"file":"CategoryBreakdownChart-CxukZnn4.js","sources":["../../app/javascript/components/charts/CategoryBreakdownChart.tsx"],"sourcesContent":["/**\n * Category breakdown pie chart component\n * Shows expense breakdown by category\n */\n\nimport React from 'react'\nimport Chart from 'react-apexcharts'\nimport { QueryProvider } from '../../providers/QueryProvider'\nimport { ErrorBoundary } from '../shared/ErrorBoundary'\nimport { useTrendsData } from '../../hooks/useTrendsData'\n\ninterface CategoryBreakdownChartProps {\n  height?: number\n}\n\nfunction CategoryBreakdownChartContent({ height = 400 }: CategoryBreakdownChartProps): React.JSX.Element {\n  const { data, isLoading, error } = useTrendsData()\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-500 dark:text-gray-400\">Loading chart data...</div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n        <div className=\"text-sm text-red-800 dark:text-red-200\">\n          Error loading chart: {error.error?.message || 'Unknown error'}\n        </div>\n      </div>\n    )\n  }\n\n  const trendsData = data?.data\n  if (!trendsData) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-500 dark:text-gray-400\">No data available</div>\n      </div>\n    )\n  }\n\n  // For now, show top merchant info as a simple representation\n  // In a full implementation, this would show category breakdown from transactions\n  const chartOptions = {\n    chart: {\n      type: 'pie' as const,\n      height: height,\n      fontFamily: 'Inter, sans-serif',\n      toolbar: {\n        show: false\n      },\n      animations: {\n        enabled: true,\n        easing: 'easeinout' as const,\n        speed: 300\n      }\n    },\n    labels: ['Top Merchant', 'Other'],\n    colors: ['#3B82F6', '#E5E7EB'],\n    dataLabels: {\n      enabled: true,\n      style: {\n        fontSize: '12px',\n        fontWeight: 'bold'\n      },\n      formatter: (val: number, opts: unknown) => {\n        const labelIndex = (opts as { seriesIndex?: number }).seriesIndex ?? 0\n        const labels = ['Top Merchant', 'Other']\n        const label = labels[labelIndex] || ''\n        return `${label}: ${val.toFixed(1)}%`\n      }\n    },\n    legend: {\n      show: true,\n      position: 'bottom' as const,\n      labels: {\n        colors: window.matchMedia('(prefers-color-scheme: dark)').matches\n          ? '#e5e7eb'\n          : '#374151'\n      }\n    },\n    tooltip: {\n      y: {\n        formatter: (val: number) => `$${val.toFixed(2)}`\n      }\n    },\n    theme: {\n      mode: (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light') as 'dark' | 'light'\n    }\n  }\n\n  // Mock data - in real implementation, this would come from category breakdown\n  const chartSeries = [trendsData.top_merchant.amount, Math.max(0, trendsData.current_month_expenses - trendsData.top_merchant.amount)]\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"text-center mb-4\">\n        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          ${trendsData.top_merchant.amount.toFixed(0)}\n        </div>\n        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n          Top: {trendsData.top_merchant.name}\n        </div>\n      </div>\n      <Chart\n        options={chartOptions}\n        series={chartSeries}\n        type=\"pie\"\n        height={height}\n      />\n    </div>\n  )\n}\n\n/**\n * CategoryBreakdownChart - Wrapped with QueryProvider and ErrorBoundary\n */\nexport default function CategoryBreakdownChart(props: CategoryBreakdownChartProps): React.JSX.Element {\n  return (\n    <ErrorBoundary>\n      <QueryProvider>\n        <CategoryBreakdownChartContent {...props} />\n      </QueryProvider>\n    </ErrorBoundary>\n  )\n}\n\n"],"names":["CategoryBreakdownChartContent","height","data","isLoading","error","useTrendsData","jsx","jsxs","_a","trendsData","chartOptions","val","opts","labelIndex","chartSeries","Chart","CategoryBreakdownChart","props","ErrorBoundary","QueryProvider"],"mappings":"8LAeA,SAASA,EAA8B,CAAE,OAAAC,EAAS,KAAuD,OACvG,KAAM,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAA,EAAUC,EAAA,EAEnC,GAAIF,EACF,OACEG,EAAAA,IAAC,OAAI,UAAU,wCACb,eAAC,MAAA,CAAI,UAAU,mCAAmC,SAAA,uBAAA,CAAqB,CAAA,CACzE,EAIJ,GAAIF,EACF,aACG,MAAA,CAAI,UAAU,wFACb,SAAAG,EAAAA,KAAC,MAAA,CAAI,UAAU,yCAAyC,SAAA,CAAA,0BAChCC,EAAAJ,EAAM,QAAN,YAAAI,EAAa,UAAW,eAAA,CAAA,CAChD,CAAA,CACF,EAIJ,MAAMC,EAAaP,GAAA,YAAAA,EAAM,KACzB,GAAI,CAACO,EACH,OACEH,EAAAA,IAAC,OAAI,UAAU,wCACb,eAAC,MAAA,CAAI,UAAU,mCAAmC,SAAA,mBAAA,CAAiB,CAAA,CACrE,EAMJ,MAAMI,EAAe,CACnB,MAAO,CACL,KAAM,MACN,OAAAT,EACA,WAAY,oBACZ,QAAS,CACP,KAAM,EAAA,EAER,WAAY,CACV,QAAS,GACT,OAAQ,YACR,MAAO,GAAA,CACT,EAEF,OAAQ,CAAC,eAAgB,OAAO,EAChC,OAAQ,CAAC,UAAW,SAAS,EAC7B,WAAY,CACV,QAAS,GACT,MAAO,CACL,SAAU,OACV,WAAY,MAAA,EAEd,UAAW,CAACU,EAAaC,IAAkB,CACzC,MAAMC,EAAcD,EAAkC,aAAe,EAGrE,MAAO,GAFQ,CAAC,eAAgB,OAAO,EAClBC,CAAU,GAAK,EACrB,KAAKF,EAAI,QAAQ,CAAC,CAAC,GACpC,CAAA,EAEF,OAAQ,CACN,KAAM,GACN,SAAU,SACV,OAAQ,CACN,OAAQ,OAAO,WAAW,8BAA8B,EAAE,QACtD,UACA,SAAA,CACN,EAEF,QAAS,CACP,EAAG,CACD,UAAYA,GAAgB,IAAIA,EAAI,QAAQ,CAAC,CAAC,EAAA,CAChD,EAEF,MAAO,CACL,KAAO,OAAO,WAAW,8BAA8B,EAAE,QAAU,OAAS,OAAA,CAC9E,EAIIG,EAAc,CAACL,EAAW,aAAa,OAAQ,KAAK,IAAI,EAAGA,EAAW,uBAAyBA,EAAW,aAAa,MAAM,CAAC,EAEpI,OACEF,EAAAA,KAAC,MAAA,CAAI,UAAU,SACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,mBACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,mDAAmD,SAAA,CAAA,IAC9DE,EAAW,aAAa,OAAO,QAAQ,CAAC,CAAA,EAC5C,EACAF,EAAAA,KAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,CAAA,QAClDE,EAAW,aAAa,IAAA,CAAA,CAChC,CAAA,EACF,EACAH,EAAAA,IAACS,EAAA,CACC,QAASL,EACT,OAAQI,EACR,KAAK,MACL,OAAAb,CAAA,CAAA,CACF,EACF,CAEJ,CAKA,SAAwBe,EAAuBC,EAAuD,CACpG,OACEX,EAAAA,IAACY,GACC,SAAAZ,EAAAA,IAACa,EAAA,CACC,eAACnB,EAAA,CAA+B,GAAGiB,CAAA,CAAO,CAAA,CAC5C,CAAA,CACF,CAEJ"}