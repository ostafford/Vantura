<div class="min-h-screen bg-gray-50 dark:bg-gray-900">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex items-center justify-between mb-6">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Trends</h1>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
          <%= link_to "← Back to Dashboard", root_path, class: "text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300" %>
          <span class="mx-2">•</span>
          Viewing <%= @start_date.strftime('%b %Y') %> to <%= @end_date.strftime('%b %Y') %>
        </p>
      </div>
      
      <!-- Date Range Selector -->
      <div>
        <label class="text-sm text-gray-600 dark:text-gray-400 mr-2">Time Period:</label>
        <select onchange="window.location.href = updateDateRange(this.value)" class="px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="3" <%= 'selected' if @date_range == '3' %>>Last 3 Months</option>
          <option value="6" <%= 'selected' if @date_range == '6' %>>Last 6 Months</option>
          <option value="12" <%= 'selected' if @date_range == '12' %>>Last 12 Months</option>
          <option value="24" <%= 'selected' if @date_range == '24' %>>Last 24 Months</option>
          <option value="all" <%= 'selected' if @date_range == 'all' %>>All Time</option>
        </select>
      </div>
    </div>

    <!-- Filter Type Toggle -->
    <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-6">
    <div class="flex gap-2 mb-4">
      <button onclick="showFilterType('merchant')" 
              id="merchantFilterTab"
              class="px-4 py-2 rounded-lg font-medium <%= @filter_type == 'merchant' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-600 hover:bg-gray-200' %>">
        Filter by Merchant
      </button>
      <button onclick="showFilterType('category')" 
              id="categoryFilterTab"
              class="px-4 py-2 rounded-lg font-medium <%= @filter_type == 'category' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-600 hover:bg-gray-200' %>">
        Filter by Category
      </button>
    </div>

    <!-- Merchant Filters -->
    <div id="merchantFilters" class="<%= @filter_type == 'category' ? 'hidden' : '' %>">
      <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Select merchants to compare (click multiple):</p>
      <div class="flex flex-wrap gap-2 mb-3">
        <% @top_merchants.each do |merchant| %>
          <label class="cursor-pointer">
            <input type="checkbox" 
                   class="hidden merchant-checkbox" 
                   value="<%= merchant %>"
                   <%= 'checked' if @selected_merchants.include?(merchant) %>>
            <span class="inline-block px-3 py-1 rounded-full text-sm font-medium <%= @selected_merchants.include?(merchant) ? 'bg-blue-600 text-white' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600' %>">
              <%= merchant %>
            </span>
          </label>
        <% end %>
      </div>
      <div class="flex gap-2">
        <button onclick="applyMerchantFilter()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          Apply Filters
        </button>
        <button onclick="clearMerchantFilter()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
          Clear
        </button>
      </div>
    </div>

    <!-- Category Filters -->
    <div id="categoryFilters" class="<%= @filter_type == 'merchant' ? 'hidden' : '' %>">
      <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Select categories to compare (click multiple):</p>
      <div class="flex flex-wrap gap-2 mb-3">
        <% @categories.each do |category| %>
          <label class="cursor-pointer">
            <input type="checkbox" 
                   class="hidden category-checkbox" 
                   value="<%= category %>"
                   <%= 'checked' if @selected_categories.include?(category) %>>
            <span class="inline-block px-3 py-1 rounded-full text-sm font-medium <%= @selected_categories.include?(category) ? 'bg-purple-600 text-white' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600' %>">
              <%= category.humanize %>
            </span>
          </label>
        <% end %>
      </div>
      <div class="flex gap-2">
        <button onclick="applyCategoryFilter()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
          Apply Filters
        </button>
        <button onclick="clearCategoryFilter()" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
          Clear
        </button>
      </div>
    </div>
  </div>

  <!-- Comparison Chart (when items are selected) -->
  <% if @comparison_data.any? %>
    <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 mb-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Spending Comparison</h2>
        
        <!-- Chart Type Selector -->
        <div class="flex gap-2">
          <button onclick="changeChartType('pie')" 
                  id="chartTypePieBtn"
                  class="px-3 py-1 rounded-lg text-sm font-medium bg-blue-600 text-white">
            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z"></path>
            </svg>
            Pie
          </button>
          <button onclick="changeChartType('line')" 
                  id="chartTypeLineBtn"
                  class="px-3 py-1 rounded-lg text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200">
            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
            </svg>
            Line
          </button>
          <button onclick="changeChartType('bar')" 
                  id="chartTypeBarBtn"
                  class="px-3 py-1 rounded-lg text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200">
            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            Bar
          </button>
        </div>
      </div>
      
      <!-- Summary Stats -->
      <div class="grid grid-cols-2 md:grid-cols-<%= [@comparison_data.size, 4].min %> gap-4 mb-6">
        <% @comparison_data.each do |item| %>
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-3">
            <p class="text-xs text-gray-500 truncate"><%= item[:name] %></p>
            <p class="text-2xl font-bold text-red-600">
              $<%= number_with_precision(item[:total], precision: 2) %>
            </p>
            <p class="text-xs text-gray-400">Total (12 months)</p>
          </div>
        <% end %>
      </div>

      <div style="position: relative; height: 400px; width: 100%;">
        <canvas id="comparisonChart"></canvas>
        <div id="noDataMessage" class="hidden absolute inset-0 flex items-center justify-center bg-gray-50 dark:bg-gray-900 rounded-lg">
          <div class="text-center p-8">
            <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No Spending Data</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 max-w-md">
              The selected merchants/categories have no transactions in the selected date range.
              <br>Try selecting different items or check the "All Transactions" page to verify your data.
            </p>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <!-- Overall trends -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6">
    <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
      <p class="text-sm text-gray-500 dark:text-gray-400">Average Monthly Income</p>
      <p class="text-3xl font-bold text-green-600 dark:text-green-400">
        $<%= number_with_precision(@monthly.map { |m| m[:income] }.sum / [@monthly.size,1].max, precision: 2) %>
      </p>
    </div>
    <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
      <p class="text-sm text-gray-500 dark:text-gray-400">Average Monthly Expenses</p>
      <p class="text-3xl font-bold text-red-600 dark:text-red-400">
        $<%= number_with_precision(@monthly.map { |m| m[:expenses] }.sum / [@monthly.size,1].max, precision: 2) %>
      </p>
    </div>
    <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
      <p class="text-sm text-gray-500 dark:text-gray-400">Average Monthly Net</p>
      <% avg_net = @monthly.map { |m| m[:net] }.sum / [@monthly.size,1].max %>
      <p class="text-3xl font-bold <%= avg_net >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400' %>">
        <%= avg_net >= 0 ? '+' : '-' %>$<%= number_with_precision(avg_net.abs, precision: 2) %>
      </p>
    </div>
  </div>

  <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Income vs Expenses vs Net (<%= @start_date.strftime('%b %Y') %> - <%= @end_date.strftime('%b %Y') %>)</h2>
      
      <!-- Chart Type Selector for Main Chart -->
      <div class="flex gap-2">
        <button onclick="changeMainChartType('line')" 
                id="mainChartTypeLineBtn"
                class="px-3 py-1 rounded-lg text-sm font-medium bg-blue-600 text-white">
          Line
        </button>
        <button onclick="changeMainChartType('bar')" 
                id="mainChartTypeBarBtn"
                class="px-3 py-1 rounded-lg text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200">
          Bar
        </button>
      </div>
    </div>
    <canvas id="incomeExpensesChart" height="96"></canvas>
  </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  let comparisonChartInstance = null;
  let currentChartType = 'pie';  // Default to pie chart
  let comparisonChartData = null;
  
  let mainChartInstance = null;
  let currentMainChartType = 'line';
  let mainChartData = null;

  function updateDateRange(newRange) {
    const url = new URL(window.location.href);
    url.searchParams.set('date_range', newRange);
    return url.toString();
  }

  function changeChartType(type) {
    currentChartType = type;
    
    // Update button styles
    ['line', 'bar', 'pie'].forEach(t => {
      const btn = document.getElementById('chartType' + t.charAt(0).toUpperCase() + t.slice(1) + 'Btn');
      if (t === type) {
        btn.className = 'px-3 py-1 rounded-lg text-sm font-medium bg-blue-600 text-white';
      } else {
        btn.className = 'px-3 py-1 rounded-lg text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200';
      }
    });
    
    // Recreate chart with new type
    if (comparisonChartInstance && comparisonChartData) {
      createComparisonChart(type, comparisonChartData);
    }
  }

  function createComparisonChart(type, data) {
    const comparisonCtx = document.getElementById('comparisonChart');
    
    if (!comparisonCtx) {
      return;
    }
    
    // Destroy existing chart
    if (comparisonChartInstance) {
      comparisonChartInstance.destroy();
    }
    
    let chartConfig;
    
    if (type === 'pie') {
      // Pie chart shows total spending per item - filter out items with 0 spending
      const pieData = data.datasets.map(ds => ({
        label: ds.label,
        total: ds.data.reduce((sum, val) => sum + val, 0),
        color: ds.borderColor
      })).filter(item => item.total > 0);  // Only include items with spending > 0
      
      // If no data after filtering, show message
      if (pieData.length === 0) {
        
        // Show "No Data" message and hide canvas
        const canvas = document.getElementById('comparisonChart');
        const noDataMsg = document.getElementById('noDataMessage');
        if (canvas && noDataMsg) {
          canvas.style.display = 'none';
          noDataMsg.classList.remove('hidden');
        }
        return;  // Don't create empty chart
      }
      
      // Hide "No Data" message and show canvas
      const canvas = document.getElementById('comparisonChart');
      const noDataMsg = document.getElementById('noDataMessage');
      if (canvas && noDataMsg) {
        canvas.style.display = 'block';
        noDataMsg.classList.add('hidden');
      }
      
      chartConfig = {
        type: 'doughnut',  // Using doughnut instead of pie for better sizing
        data: {
          labels: pieData.map(item => item.label),
          datasets: [{
            data: pieData.map(item => item.total),
            backgroundColor: pieData.map(item => item.color),
            borderColor: '#ffffff',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,  // Allow chart to fill container
          plugins: {
            legend: {
              display: true,
              position: 'right',
              labels: {
                padding: 10,
                font: {
                  size: 11
                },
                boxWidth: 15
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.parsed || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = ((value / total) * 100).toFixed(1);
                  return label + ': $' + value.toFixed(2) + ' (' + percentage + '%)';
                }
              }
            }
          }
        }
      };
    } else {
      // Line or Bar chart - always show canvas, hide no data message
      const canvas = document.getElementById('comparisonChart');
      const noDataMsg = document.getElementById('noDataMessage');
      if (canvas && noDataMsg) {
        canvas.style.display = 'block';
        noDataMsg.classList.add('hidden');
      }
      
      // Line or Bar chart
      chartConfig = {
        type: type,
        data: data,
        options: {
          responsive: true,
          maintainAspectRatio: false,  // Allow chart to fill container
          plugins: {
            legend: {
              display: true,
              position: 'top'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return '$' + value.toFixed(2);
                }
              }
            }
          }
        }
      };
    }
    
    comparisonChartInstance = new Chart(comparisonCtx.getContext('2d'), chartConfig);
  }

  function changeMainChartType(type) {
    currentMainChartType = type;
    
    // Update button styles
    ['line', 'bar'].forEach(t => {
      const btn = document.getElementById('mainChartType' + t.charAt(0).toUpperCase() + t.slice(1) + 'Btn');
      if (t === type) {
        btn.className = 'px-3 py-1 rounded-lg text-sm font-medium bg-blue-600 text-white';
      } else {
        btn.className = 'px-3 py-1 rounded-lg text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200';
      }
    });
    
    // Recreate chart with new type
    if (mainChartInstance && mainChartData) {
      createMainChart(type, mainChartData);
    }
  }

  function createMainChart(type, data) {
    const ctx = document.getElementById('incomeExpensesChart');
    if (!ctx) return;
    
    // Destroy existing chart
    if (mainChartInstance) {
      mainChartInstance.destroy();
    }
    
    mainChartInstance = new Chart(ctx.getContext('2d'), {
      type: type,
      data: data,
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function(value) {
                return '$' + value.toFixed(2);
              }
            }
          }
        }
      }
    });
  }

  function showFilterType(type) {
    if (type === 'merchant') {
      document.getElementById('merchantFilters').classList.remove('hidden');
      document.getElementById('categoryFilters').classList.add('hidden');
      document.getElementById('merchantFilterTab').classList.remove('bg-gray-100', 'text-gray-600', 'hover:bg-gray-200');
      document.getElementById('merchantFilterTab').classList.add('bg-blue-600', 'text-white');
      document.getElementById('categoryFilterTab').classList.remove('bg-blue-600', 'text-white');
      document.getElementById('categoryFilterTab').classList.add('bg-gray-100', 'text-gray-600', 'hover:bg-gray-200');
    } else {
      document.getElementById('merchantFilters').classList.add('hidden');
      document.getElementById('categoryFilters').classList.remove('hidden');
      document.getElementById('categoryFilterTab').classList.remove('bg-gray-100', 'text-gray-600', 'hover:bg-gray-200');
      document.getElementById('categoryFilterTab').classList.add('bg-blue-600', 'text-white');
      document.getElementById('merchantFilterTab').classList.remove('bg-blue-600', 'text-white');
      document.getElementById('merchantFilterTab').classList.add('bg-gray-100', 'text-gray-600', 'hover:bg-gray-200');
    }
  }

  function applyMerchantFilter() {
    const selected = Array.from(document.querySelectorAll('.merchant-checkbox:checked'))
                          .map(cb => cb.value);
    const url = new URL(window.location.origin + window.location.pathname);
    url.searchParams.set('filter_type', 'merchant');
    if (selected.length > 0) {
      url.searchParams.set('merchants', selected.join(','));
    }
    window.location.href = url.toString();
  }

  function clearMerchantFilter() {
    window.location.href = window.location.origin + window.location.pathname + '?filter_type=merchant';
  }

  function applyCategoryFilter() {
    const selected = Array.from(document.querySelectorAll('.category-checkbox:checked'))
                          .map(cb => cb.value);
    const url = new URL(window.location.origin + window.location.pathname);
    url.searchParams.set('filter_type', 'category');
    if (selected.length > 0) {
      url.searchParams.set('categories', selected.join(','));
    }
    window.location.href = url.toString();
  }

  function clearCategoryFilter() {
    window.location.href = window.location.origin + window.location.pathname + '?filter_type=category';
  }

  // Update checkbox visual state when clicked
  document.addEventListener('turbo:load', function() {
    document.querySelectorAll('.merchant-checkbox, .category-checkbox').forEach(checkbox => {
      const label = checkbox.nextElementSibling;
      
      // Handle visual toggle on checkbox change
      checkbox.addEventListener('change', function() {
        if (this.checked) {
          label.classList.remove('bg-gray-100', 'text-gray-600', 'hover:bg-gray-200');
          if (this.classList.contains('merchant-checkbox')) {
            label.classList.add('bg-blue-600', 'text-white');
          } else {
            label.classList.add('bg-purple-600', 'text-white');
          }
        } else {
          if (this.classList.contains('merchant-checkbox')) {
            label.classList.remove('bg-blue-600', 'text-white');
          } else {
            label.classList.remove('bg-purple-600', 'text-white');
          }
          label.classList.add('bg-gray-100', 'text-gray-600', 'hover:bg-gray-200');
        }
      });
      
      // Make the label clickable
      label.addEventListener('click', function(e) {
        e.preventDefault();
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event('change'));
      });
    });
  });

  // Initialize charts on Turbo page load
  document.addEventListener('turbo:load', function() {
    // Destroy existing chart instances to prevent duplicates
    Chart.helpers.each(Chart.instances, function(instance) {
      instance.destroy();
    });

    const labels = <%= raw @monthly.map { |m| m[:month].strftime('%b %Y') }.to_json %>;
    const incomeData = <%= raw @monthly.map { |m| m[:income].round(2) }.to_json %>;
    const expensesData = <%= raw @monthly.map { |m| m[:expenses].round(2) }.to_json %>;
    const netData = <%= raw @monthly.map { |m| m[:net].round(2) }.to_json %>;

    // Store main chart data globally
    mainChartData = {
      labels: labels,
      datasets: [
        {
          label: 'Income',
          data: incomeData,
          borderColor: 'rgba(16, 185, 129, 1)',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          tension: 0.3,
          fill: true
        },
        {
          label: 'Expenses',
          data: expensesData,
          borderColor: 'rgba(239, 68, 68, 1)',
          backgroundColor: 'rgba(239, 68, 68, 0.1)',
          tension: 0.3,
          fill: true
        },
        {
          label: 'Net',
          data: netData,
          borderColor: 'rgba(59, 130, 246, 1)',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          tension: 0.3,
          fill: false
        }
      ]
    };

    // Create initial main chart
    createMainChart(currentMainChartType, mainChartData);

    <% if @comparison_data.any? %>
      // Comparison chart with multiple datasets
      const comparisonLabels = <%= raw @monthly.map { |m| m[:month].strftime('%b %Y') }.to_json %>;
      const colors = [
        { border: 'rgba(239, 68, 68, 1)', bg: 'rgba(239, 68, 68, 0.1)' },    // red
        { border: 'rgba(59, 130, 246, 1)', bg: 'rgba(59, 130, 246, 0.1)' },   // blue
        { border: 'rgba(16, 185, 129, 1)', bg: 'rgba(16, 185, 129, 0.1)' },   // green
        { border: 'rgba(245, 158, 11, 1)', bg: 'rgba(245, 158, 11, 0.1)' },   // amber
        { border: 'rgba(139, 92, 246, 1)', bg: 'rgba(139, 92, 246, 0.1)' },   // purple
        { border: 'rgba(236, 72, 153, 1)', bg: 'rgba(236, 72, 153, 0.1)' },   // pink
        { border: 'rgba(20, 184, 166, 1)', bg: 'rgba(20, 184, 166, 0.1)' },   // teal
        { border: 'rgba(251, 146, 60, 1)', bg: 'rgba(251, 146, 60, 0.1)' }    // orange
      ];

      const comparisonData = <%= raw @comparison_data.to_json %>;
      const allMonths = <%= raw @monthly.map { |m| m[:month].strftime('%Y-%m-01') }.to_json %>;
      
      const comparisonDatasets = comparisonData.map((item, idx) => {
        const colorIdx = idx % colors.length;
        const monthlyAmounts = allMonths.map(monthStr => {
          const monthData = item.monthly.find(d => {
            const dMonth = new Date(d.month).toISOString().substring(0, 10);
            return dMonth === monthStr;
          });
          return monthData ? monthData.amount : 0;
        });
        
        return {
          label: item.name,
          data: monthlyAmounts,
          borderColor: colors[colorIdx].border,
          backgroundColor: colors[colorIdx].bg,
          tension: 0.3,
          fill: false
        };
      });

      // Store chart data globally for chart type switching
      comparisonChartData = {
        labels: comparisonLabels,
        datasets: comparisonDatasets
      };

      // Create initial chart with current type (pie by default)
      createComparisonChart(currentChartType, comparisonChartData);
    <% end %>
  });
</script>
