<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Vantura" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes Tailwind CSS (built) and application styles %>
    <%= stylesheet_link_tag "tailwind", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
  </head>

  <body>
    <%= yield %>
    
    <!-- Dark Mode Toggle Script -->
    <script>
      // Initialize theme on page load
      function initTheme() {
        const theme = localStorage.getItem('theme') || 'auto';
        applyTheme(theme);
      }
      
      function applyTheme(theme) {
        const root = document.documentElement;
        
        if (theme === 'dark') {
          root.classList.add('dark');
        } else if (theme === 'light') {
          root.classList.remove('dark');
        } else {
          // Auto mode - use system preference
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            root.classList.add('dark');
          } else {
            root.classList.remove('dark');
          }
        }
        
        localStorage.setItem('theme', theme);
      }
      
      function toggleTheme() {
        const current = localStorage.getItem('theme') || 'auto';
        let next;
        
        if (current === 'light') {
          next = 'dark';
        } else if (current === 'dark') {
          next = 'auto';
        } else {
          next = 'light';
        }
        
        applyTheme(next);
        updateThemeButton(next);
      }
      
      function updateThemeButton(theme) {
        const btn = document.getElementById('themeToggle');
        if (!btn) return;
        
        const icons = {
          light: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>',
          dark: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>',
          auto: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>'
        };
        
        const labels = {
          light: 'Light',
          dark: 'Dark',
          auto: 'Auto'
        };
        
        btn.querySelector('svg').innerHTML = icons[theme];
        btn.querySelector('span').textContent = labels[theme];
      }
      
      // Initialize on page load
      document.addEventListener('DOMContentLoaded', function() {
        initTheme();
        const theme = localStorage.getItem('theme') || 'auto';
        updateThemeButton(theme);
      });
      document.addEventListener('turbo:load', function() {
        initTheme();
        const theme = localStorage.getItem('theme') || 'auto';
        updateThemeButton(theme);
      });
      
      // Listen for system theme changes when in auto mode
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (localStorage.getItem('theme') === 'auto') {
          applyTheme('auto');
        }
      });
    </script>
  </body>
</html>
